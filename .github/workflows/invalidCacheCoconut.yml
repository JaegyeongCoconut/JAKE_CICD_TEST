# LINK: CloudFront 링크 https://us-east-1.console.aws.amazon.com/cloudfront/v4/home?region=ap-southeast-1#/distributions

name: Invalidate CloudFront Cache

on:
  workflow_dispatch:
    inputs:
      SERVICE_NAME:
        description: "Service name for deployment"
        required: true
      DEPLOY_ENV:
        description: "Deployment environment"
        required: true
  workflow_run:
    workflows: ["KOKKOK WEB Service Deploy"]
    types:
      - completed

jobs:
  invalidate-cache:
    runs-on: ubuntu-latest
    env:
      AUTHORIZED_USERS_IN_PROD: "JaegyeongCoconut,Hyyunjin,CoconutJiyong" # NOTE: main branch 배포 권한이 있는 사용자 목록. ','로 구분. 띄어쓰기 x
      AUTHORIZED_USERS_IN_DEV: "JaegyeongCoconut,Hyyunjin,CoconutJiyong,HojinChoicoco" # NOTE: develop branch 배포 권한이 있는 사용자 목록. ','로 구분. 띄어쓰기 x
      CLOUD_FRONT_SERVICES: '{ "eCommerceAdmin-dev": "E2IMC4GOL9IKWA","carAdmin-dev": "EB3W4GTAL529J","carAdmin-prod": "E5QUPE30N5P6M","carInspection-dev": "E3HPI2NX3ZV9J3","carInspection-prod": "E2M7042NEL7TSQ","logisticsAdmin-dev": "E9TQP7SLHLETV","logisticsAdmin-prod": "E21EYEFNY9XHXK"}' # NOTE: 서비스별 CloudFront ID 목록. JSON 형태로 작성. 띄어쓰기 x
      AWS_ACCESS_KEY_ID: ${{ secrets.COCONUT_AWS_ACCESS_KEY_ID }} # NOTE: IAM Access Key
      AWS_SECRET_ACCESS_KEY: ${{ secrets.COCONUT_AWS_SECRET_ACCESS_KEY }} # NOTE: IAM Secret Access Key

    steps:
      # NOTE: github actions env 설정
      - name: Set github actions env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "SERVICE_NAME=${{ github.event.inputs.SERVICE_NAME }}" >> $GITHUB_ENV
            echo "DEPLOY_ENV=${{ github.event.inputs.DEPLOY_ENV }}" >> $GITHUB_ENV
            printf "내부"
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "SERVICE_NAME=${{ github.event.workflow_run.inputs.SERVICE_NAME }}" >> $GITHUB_ENV
            echo "DEPLOY_ENV=${{ github.event.workflow_run.inputs.DEPLOY_ENV }}" >> $GITHUB_ENV
            printf "외부"
          fi

          printf "✅ Set env in github actions 'SERVICE_NAME' is '$SERVICE_NAME'"
          printf "✅ Set env in github actions 'DEPLOY_ENV' is '$DEPLOY_ENV'"

      # NOTE: 배포 실행 환경 변수 명 검사
      - name: Check deploy environment is valid
        run: |
          if [[ "$DEPLOY_ENV" != "dev" && "$DEPLOY_ENV" != "prod" ]]; then
            printf "🚨 ::error:: Unsupported deploy environment: $DEPLOY_ENV"
            exit 1
          fi

      # NOTE: 배포 실행 환경에 대한 계정 권한 검증
      - name: Validate authorization
        run: |
          AUTHORIZED_USERS=$([[ "$DEPLOY_ENV" == "dev" ]] && echo "$AUTHORIZED_USERS_IN_DEV" || echo "$AUTHORIZED_USERS_IN_PROD")

          if [[ ! ",$AUTHORIZED_USERS," =~ ",${{ github.actor }}," ]]; then
            printf "🚨 ::error:: User '${{ github.actor }}' is not authorized to deploy."
            exit 1
          fi

          printf "✅ User '${{ github.actor }}' is authorized to deploy to the $DEPLOY_ENV environment."

      # NOTE: 접근할 CloudFront 설정 + 접근할 CloudFront 객체 존재 여부 확인
      - name: Set CloudFront distribution ID + Check CloudFront object existence
        run: |
          DISTRIBUTION_ID=$(echo $CLOUD_FRONT_SERVICES | jq -r --arg SERVICE_NAME "$SERVICE_NAME" --arg DEPLOY_ENV "$DEPLOY_ENV" '.[$SERVICE_NAME + "-" + $DEPLOY_ENV]')

          printf "✅ Set env in github actions 'SERVICE_NAME' is '$SERVICE_NAME'"
          printf "✅ Set env in github actions 'DEPLOY_ENV' is '$DEPLOY_ENV'"

          if [ -z "$DISTRIBUTION_ID" ]; then
            printf "🚨 ::error:: No CloudFront distribution ID found for service '$SERVICE_NAME' and environment '$DEPLOY_ENV'"
            exit 1
          fi

          echo "DISTRIBUTION_ID=${DISTRIBUTION_ID}" >> $GITHUB_ENV
          printf "✅ CloudFront distribution '$DISTRIBUTION_ID' is valid."

      # NOTE: CloudFront 캐시 무효화 실행
      - name: Invalidate CloudFront Cache
        run: |
          echo "🚀 Invalidating cache for CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

          printf "✅ Cache invalidated for distribution ID: $DISTRIBUTION_ID"
