name: KOKKOK 웹 서비스 S3 직전 버전 롤백

on:
  workflow_dispatch:
    inputs:
      SERVICE_NAME:
        description: "배포 서비스 이름"
        required: true
      DEPLOY_ENV:
        description: "배포 환경"
        required: true

run-name: "↩️ KOKKOK ${{ inputs.SERVICE_NAME }} / ${{ inputs.DEPLOY_ENV }} 환경 롤백 실행"

jobs:
  call-common:
    uses: ./.github/workflows/common.yml # ✅ 공용 YML 호출
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  rollback:
    runs-on: ubuntu-latest
    needs: call-common
    env:
      AUTHORIZED_ENV: ${{ needs.call-common.outputs.AUTHORIZED_ENV }}
      AUTHORIZED_USERS_IN_DEV: ${{ needs.call-common.outputs.AUTHORIZED_USERS_IN_DEV }}
      AWS_CONFIG: ${{ needs.call-common.outputs.AWS_CONFIG }}
      S3_DEPLOY_BUCKET_REGION: ${{ needs.call-common.outputs.S3_DEPLOY_BUCKET_REGION }}
      SERVICE_NAME: ${{ github.event.inputs.SERVICE_NAME }}
      DEPLOY_ENV: ${{ github.event.inputs.DEPLOY_ENV }}
      S3_BUCKET_NAME: ${{ needs.call-common.outputs.S3_BUCKET_NAME }}

    steps:
      - name: "🔑 AWS IAM KEY 설정"
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          printf "::notice:: ✅ AWS IAM KEY 설정이 완료되었습니다.\n"

      - name: "🗂️ build 폴더를 build-legacy 폴더로 백업 (build → build-legacy)"
        run: |
          aws s3 mv --recursive --region $S3_DEPLOY_BUCKET_REGION s3://$S3_BUCKET_NAME/build s3://$S3_BUCKET_NAME/build-legacy || {
            printf "::error:: 🚨 기존 build 폴더가 없습니다.\n"
            exit 1
          }

          printf "::notice:: ✅ 기존 build를 build-new로 백업 완료\n"

      - name: "☁️ S3 루트에 index.html 업로드 (기존 build-before/index.html을 최상위로 복사)"
        run: |
          # NOTE: S3 루트에 index.html 업로드 (기존 build-before/index.html을 최상위로 복사)
          aws s3 cp --region $S3_DEPLOY_BUCKET_REGION s3://$S3_BUCKET_NAME/build-before/index.html s3://$S3_BUCKET_NAME/index.html || {
            printf "::error:: 🚨 S3 루트에 index.html 업로드 실패!\n"

            aws s3 mv --recursive --region $S3_DEPLOY_BUCKET_REGION s3://$S3_BUCKET_NAME/build-legacy s3://$S3_BUCKET_NAME/build
            printf "::notice:: 🔄 build-legacy → build 폴더로 롤백 완료\n"

            exit 1
          }

          printf "::notice:: ✅ index.html이 S3 루트에 업로드되었습니다: $S3_BUCKET_NAME/index.html\n"

      - name: "↩️ build-before 폴더를 build 폴더로 롤백 (build-before → build) 및 index.html root 경로 업로드"
        run: |
          aws s3 mv --recursive --region $S3_DEPLOY_BUCKET_REGION s3://$S3_BUCKET_NAME/build-before s3://$S3_BUCKET_NAME/build || {
            printf "::error:: 🚨 build-before → build 폴더로 롤백 실패!\n"

            aws s3 cp --region $S3_DEPLOY_BUCKET_REGION s3://$S3_BUCKET_NAME/build-legacy/index.html s3://$S3_BUCKET_NAME/index.html || {
            printf "::notice:: 🔄 S3 루트에 index.html 롤백 완료\n"

            aws s3 mv --recursive --region $S3_DEPLOY_BUCKET_REGION s3://$S3_BUCKET_NAME/build-legacy s3://$S3_BUCKET_NAME/build
            printf "::notice:: 🔄 build-legacy → build 폴더로 롤백 완료\n"
            
            exit 1
            }
          }

          printf "::notice:: ✅ build-before → build 롤백 완료\n"
