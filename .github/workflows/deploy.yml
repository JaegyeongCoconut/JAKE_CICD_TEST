name: Manual Trigger Workflow

on:
  workflow_dispatch: # 수동 실행 이벤트

jobs:
  run-job:
    runs-on: ubuntu-latest # 워크플로를 실행할 환경 설정

    env:
      AUTHORIZED_USERS_IN_MAIN: "JaegyeongCoconut" # main branch 배포 권한이 있는 사용자 정의. ,로 구분
      AUTHORIZED_USERS_IN_DEVELOP: "JaegyeongCoconut" # develop branch 배포 권한이 있는 사용자 정의. ,로 구분

    steps:
      # main 또는 develop이 아닌 브랜치일 때 실패 처리
      - name: Check branch condition
        if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}
        run: |
          echo "::error:: main 또는 develop 브랜치에서만 실행 가능합니다."
          exit 1

      # 브랜치에 따른 권한 확인 및 실행
      - name: Authorization check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            AUTHORIZED_USERS=$AUTHORIZED_USERS_IN_DEVELOP
            BRANCH_NAME="develop"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            AUTHORIZED_USERS=$AUTHORIZED_USERS_IN_MAIN
            BRANCH_NAME="main"
          fi
          echo "Authorized users for $BRANCH_NAME branch: $AUTHORIZED_USERS"

          if [[ ! ",$AUTHORIZED_USERS," =~ ",${GITHUB_ACTOR}," ]]; then
            echo "::error:: You are not authorized to deploy to the $BRANCH_NAME branch."
            exit 1
          fi
          echo "$BRANCH_NAME branch workflow triggered by ${{ github.actor }}"

      - name: Checkout source code. # 레포지토리 체크아웃
        uses: actions/checkout@v3

      - name: Cache node modules # node modules 캐싱
        uses: actions/cache@v3
        with:
          path: node_modules # 프로젝트의 node_modules가 있는 경로로 설정
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies # 의존 파일 설치
        run: npm install # npm install을 실행할 경로로 설정

      - name: Build # React Build
        run: npm run build # npm run build를 실행할 경로로 설정

      - name: Deploy # S3에 배포하기
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # IAM Access Key
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # IAM Secret Access Key
          S3_BUCKET: s3://jakecicd # S3 Bucket 이름
          S3_REGION: ap-southeast-1 # S3 Bucket 리전
          BUILD_DIR: dist # 빌드 파일 이름
        run: |
          set -x # 디버깅 모드 활성화
          aws s3 ls $S3_BUCKET --region $S3_REGION # S3 접근 확인
          aws s3 cp \
           --recursive \
           --region $S3_REGION \
           $BUILD_DIR $S3_BUCKET
