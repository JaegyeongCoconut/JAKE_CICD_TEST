name: Manual Trigger Workflow

on:
  workflow_dispatch: # 수동 실행 이벤트

jobs:
  run-job:
    runs-on: ubuntu-latest # 워크플로를 실행할 환경 설정
    env:
      S3_REGION: ap-southeast-1 # S3 Bucket 리전
      S3_ENV_BUCKET: jakecicd-env # 단일 S3 버킷 이름
      GITHUB_PROD_BRANCH: main # 메인 브랜치 이름
      GITHUB_DEV_BRANCH: develop # 개발 브랜치 이름
      AUTHORIZED_USERS_IN_PROD: "JaegyeongCoconut" # main branch 배포 권한이 있는 사용자 정의
      AUTHORIZED_USERS_IN_DEV: "JaegyeongCoconut" # develop branch 배포 권한이 있는 사용자 정의

    steps:
      # 현재 브랜치 확인 및 .env 파일 결정
      - name: Determine .env file and branch
        id: determine_env
        run: |
          CURRENT_BRANCH=$(echo "${{ github.ref_name }}")
          FILE_PATH=""
          AUTHORIZED_USERS=""

          echo "🚀 Current branch: $CURRENT_BRANCH"

          if [[ "$CURRENT_BRANCH" == "$GITHUB_DEV_BRANCH" ]]; then
            FILE_PATH=".env.development"
            AUTHORIZED_USERS=$AUTHORIZED_USERS_IN_DEV
          elif [[ "$CURRENT_BRANCH" == "$GITHUB_PROD_BRANCH" ]]; then
            FILE_PATH=".env.production"
            AUTHORIZED_USERS=$AUTHORIZED_USERS_IN_PROD
          else
            echo "🚨 ::error:: Unsupported branch: $CURRENT_BRANCH"
            exit 1
          fi

          echo "FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
          echo "AUTHORIZED_USERS=$AUTHORIZED_USERS" >> $GITHUB_ENV
          echo "✅ Selected .env file: $FILE_PATH"
          echo "✅ Authorized users: $AUTHORIZED_USERS"

      # 배포 권한 확인
      - name: Authorization check
        run: |
          CURRENT_USER="${{ github.actor }}"
          AUTHORIZED_USERS="${AUTHORIZED_USERS}"

          echo "🚀 Current user: $CURRENT_USER"
          echo "🚀 Authorized users: $AUTHORIZED_USERS"

          if [[ ! ",$AUTHORIZED_USERS," =~ ",$CURRENT_USER," ]]; then
            echo "🚨 ::error:: User '$CURRENT_USER' is not authorized to deploy to the $CURRENT_BRANCH branch."
            exit 1
          fi

          echo "✅ User '$CURRENT_USER' is authorized to deploy to the $CURRENT_BRANCH branch."

      # 레포지토리 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # S3에서 환경 변수 파일 다운로드
      - name: Download .env file from S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "🚀 Downloading .env file from S3: $S3_ENV_BUCKET/$FILE_PATH"

          aws s3 cp s3://$S3_ENV_BUCKET/$FILE_PATH .env --region $S3_REGION
          echo "✅ $FILE_PATH file downloaded and saved as '.env'."

      # .env 파일 유무 확인
      - name: Check .env file
        run: |
          if [[ ! -f ".env" ]]; then
            echo "🚨 ::error:: .env file is missing! Cannot proceed with the build."
            exit 1
          fi
          echo "✅ .env file exists."

      # 의존 파일 설치
      - name: Install Dependencies
        run: npm install

      # React Build
      - name: Build
        run: |
          set -a # 모든 export된 변수 자동 적용
          source .env # .env 파일의 내용을 환경 변수로 로드
          npm run build

      # S3에 배포
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # IAM Access Key
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # IAM Secret Access Key
          S3_DEPLOY_BUCKET: s3://jakecicd # 배포 S3 Bucket
          BUILD_DIR: dist # 빌드 파일 이름
        run: |
          set -x # 디버깅 모드 활성화
          aws s3 ls $S3_DEPLOY_BUCKET --region $S3_REGION # S3 접근 확인
          aws s3 cp \
           --recursive \
           --region $S3_REGION \
           $BUILD_DIR $S3_DEPLOY_BUCKET
