# LINK: 배포 Flow chart 링크 https://boardmix.com/app/editor/yrBD1jJ3wyfQEpDyjjGuqw
# LINK: S3 배포 버킷 링크 https://ap-northeast-2.console.aws.amazon.com/s3/home?region=ap-northeast-2
# LINK: CloudFront 링크 https://us-east-1.console.aws.amazon.com/cloudfront/v4/home?region=ap-southeast-1#/distributions
# LINK: S3 env 버킷 링크 https://ap-northeast-2.console.aws.amazon.com/s3/buckets/coconutsilo-env-dev?region=ap-northeast-2&bucketType=general&tab=objects
# LINK: Notion env 링크 https://www.notion.so/coconutsilo/1f74486ed21f47a3a4f087d0ed94c263?v=aad4eec6ae7c43918581c212864c424d
name: KOKKOK 웹 서비스 S3 배포

on:
  workflow_dispatch:
    inputs:
      SERVICE_NAME:
        description: "배포 서비스 이름"
        required: true
      DEPLOY_ENV:
        description: "배포 환경"
        required: true

jobs:
  run-job:
    runs-on: ubuntu-latest
    env:
      # AUTHORIZED_ENV: "dev,prod" # NOTE: 배포 가능한 환경 목록. ','로 구분. 띄어쓰기 x
      # TODO: 운영 환경 배포 못하도록 임시 주석 처리. 추후 수정 필요
      AUTHORIZED_ENV: "dev" # NOTE: 배포 가능한 환경 목록. ','로 구분. 띄어쓰기 x
      AUTHORIZED_BRANCHES: "main,develop" # NOTE: 배포 가능한 브랜치 목록. ','로 구분. 띄어쓰기 x
      AUTHORIZED_USERS_IN_PROD: "JaegyeongCoconut,Hyyunjin,CoconutJiyong" # NOTE: main branch 배포 권한이 있는 사용자 목록. ','로 구분. 띄어쓰기 x
      AUTHORIZED_USERS_IN_DEV: "JaegyeongCoconut,Hyyunjin,CoconutJiyong,HojinChoicoco" # NOTE: develop branch 배포 권한이 있는 사용자 목록. ','로 구분. 띄어쓰기 x

      # NOTE: 서비스별 CloudFront ID 목록. JSON 형태로 작성. 띄어쓰기 x
      CLOUD_FRONT_SERVICES: '{
        "eCommerceAdmin-dev": "E2IMC4GOL9IKWA",
        "carAdmin-dev": "EB3W4GTAL529J",
        "carAdmin-prod": "E5QUPE30N5P6M",
        "carInspection-dev": "E3HPI2NX3ZV9J3",
        "carInspection-prod": "E2M7042NEL7TSQ",
        "logisticsAdmin-dev": "E9TQP7SLHLETV",
        "logisticsAdmin-prod": "E21EYEFNY9XHXK"
        }'
      # NOTE: 서비스별 S3 버킷 목록. JSON 형태로 작성
      S3_DEPLOY_SERVICES_BUCKETS: '{
        "carAdmin": "kk-car-admin-web",
        "carInspection": "kk-car-inspection-web",
        "eCommerceAdmin": "kk-ecomm-admin-web",
        "logisticsAdmin": "kk-logi-carriers-web"
        }'
      S3_DEPLOY_BUCKET_REGION: "ap-southeast-1" # NOTE: 배포 S3 버킷이 생성된 리전
      AWS_ACCESS_KEY_ID: ${{ secrets.COCONUT_AWS_ACCESS_KEY_ID }} # NOTE: IAM Access Key
      AWS_SECRET_ACCESS_KEY: ${{ secrets.COCONUT_AWS_SECRET_ACCESS_KEY }} # NOTE: IAM Secret Access Key

      ENV_CARADMIN_DEV: ${{ secrets.ENV_CARADMIN_DEV }}
      ENV_CARADMIN_PROD: ${{ secrets.ENV_CARADMIN_PROD }}

    steps:
      - name: github actions 환경 변수 설정
        run: |
          echo "SERVICE_NAME=${{ github.event.inputs.SERVICE_NAME }}" >> $GITHUB_ENV
          echo "DEPLOY_ENV=${{ github.event.inputs.DEPLOY_ENV }}" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

          printf "✅ github actions에 'SERVICE_NAME' 환경 변수가 설정되었습니다: ${{ github.event.inputs.SERVICE_NAME }}\n"
          printf "✅ github actions에 'DEPLOY_ENV' 환경 변수가 설정되었습니다: ${{ github.event.inputs.DEPLOY_ENV }}\n"
          printf "✅ github actions에 'CURRENT_BRANCH' 환경 변수가 설정되었습니다: ${{ github.ref_name }}\n"

      - name: 배포 브랜치 유효성 검사
        run: |
          if [[ ! ",$AUTHORIZED_BRANCHES," =~ ",$CURRENT_BRANCH," ]]; then
            printf "🚨 ::error:: 지원되지 않는 브랜치입니다: $CURRENT_BRANCH\n"
            exit 1
          fi
          printf "✅ 브랜치 '$CURRENT_BRANCH'는 배포에 유효합니다.\n"

      - name: 배포 환경 유효성 검사
        run: |
          if [[ ! ",$AUTHORIZED_ENV," =~ ",$DEPLOY_ENV," ]]; then
            printf "🚨 ::error:: 지원되지 않는 배포 환경입니다: $DEPLOY_ENV\n"
            exit 1
          fi
          printf "✅ 배포 환경 '$DEPLOY_ENV'는 유효합니다.\n"

      - name: 배포 실행 사용자 권한 검증
        run: |
          AUTHORIZED_USERS=$([[ "$DEPLOY_ENV" == "dev" ]] && echo "$AUTHORIZED_USERS_IN_DEV" || echo "$AUTHORIZED_USERS_IN_PROD")

          if [[ ! ",$AUTHORIZED_USERS," =~ ",${{ github.actor }}," ]]; then
            printf "🚨 ::error:: 사용자 '${{ github.actor }}'는 배포 권한이 없습니다.\n"
            exit 1
          fi

          printf "✅ 사용자 '${{ github.actor }}'는 $DEPLOY_ENV 환경에 배포할 권한이 있습니다.\n"

      - name: 배포 S3 버킷 설정
        run: |
          S3_DEPLOY_BUCKET_PREFIX=$(echo $S3_DEPLOY_SERVICES_BUCKETS | jq -r --arg SERVICE_NAME "$SERVICE_NAME" '.[$SERVICE_NAME]')
          if [[ -z "$S3_DEPLOY_BUCKET_PREFIX" ]]; then
            printf "🚨 ::error:: 잘못된 서비스 이름입니다: $SERVICE_NAME\n"
            exit 1
          fi

          S3_DEPLOY_BUCKET_SUFFIX=$([[ "$DEPLOY_ENV" == "dev" ]] && echo "dev-s3" || echo "prd-s3")
          echo "S3_DEPLOY_BUCKET_NAME=${S3_DEPLOY_BUCKET_PREFIX}-${S3_DEPLOY_BUCKET_SUFFIX}" >> $GITHUB_ENV
          printf "✅ 서비스 '$SERVICE_NAME'의 S3 버킷은 '${S3_DEPLOY_BUCKET_PREFIX}-${S3_DEPLOY_BUCKET_SUFFIX}'입니다.\n"

      - name: S3 버킷 존재 여부 확인
        run: |
          aws s3api head-bucket --bucket $S3_DEPLOY_BUCKET_NAME --region $S3_DEPLOY_BUCKET_REGION || {
            printf "🚨 ::error:: S3 버킷 '$S3_DEPLOY_BUCKET_NAME'이 존재하지 않습니다.\n"
            exit 1
          }
          printf "✅ S3 버킷 '$S3_DEPLOY_BUCKET_NAME'에 접근할 수 있습니다.\n"

      - name: 소스 repo 코드 체크아웃
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: pnpm 설치
        with:
          version: 9.4.0
          run_install: false

      # LINK: https://github.com/actions/setup-node?tab=readme-ov-file#caching-global-packages-data
      - name: Node.js 설치 및 의존성 cache 사용
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: 의존성 설치
        run: pnpm install

      - name: github > Settings > Secrets 에서 환경 변수 설정
        run: |
          # NOTE: SERVICE_NAME과 DEPLOY_ENV를 대문자로 변환해 Secrets 키 생성
          UPPER_SERVICE_NAME=$(echo "${{ github.event.inputs.SERVICE_NAME }}" | tr '[:lower:]' '[:upper:]')
          UPPER_DEPLOY_ENV=$(echo "${{ github.event.inputs.DEPLOY_ENV }}" | tr '[:lower:]' '[:upper:]')
          ENV_SECRET_NAME="ENV_${UPPER_SERVICE_NAME}_${UPPER_DEPLOY_ENV}"
          printf "✅ ENV_SECRET_NAME: $ENV_SECRET_NAME\n"

          # NOTE: Secrets에서 값 가져오기
          ENV_CONTENT="${!ENV_SECRET_NAME}"

          # NOTE: 빈 값 확인
          if [[ -z "$ENV_CONTENT" ]]; then
            printf "🚨 ::error:: $ENV_SECRET_NAME에 해당하는 시크릿을 찾을 수 없습니다.\n"
            exit 1
          fi

          # NOTE: 환경 변수로 설정
          echo "$ENV_CONTENT" | while IFS= read -r line; do
            # NOTE: 빈 줄이나 잘못된 값 건너뛰기
            if [[ -n "$line" ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done

          # NOTE: .env.[환경] 파일이름으로 환경 변수 값 저장
          ENV_FILE_NAME=".env.$([[ "$DEPLOY_ENV" == "dev" ]] && echo "development" || echo "production")"
          echo "$ENV_CONTENT" > "$ENV_FILE_NAME"
          printf "✅ 환경 변수를 $ENV_FILE_NAME 파일에 저장했습니다.\n"

          # NOTE: ENV_FILE_NAME 환경 변수를 GITHUB_ENV에 저장
          echo "ENV_FILE_NAME=$ENV_FILE_NAME" >> $GITHUB_ENV

          # NOTE: .env.[환경] 파일 內 주석(#) 포함 여부 확인
          if grep -q '^#' "$ENV_FILE_NAME"; then
            printf "🚨 ::error:: .env 파일에 '#'로 시작하는 주석이 포함되어 있어 오류가 발생할 수 있습니다.\n"
            printf "🚨 ::error:: github actions에서 .env 파일의 모든 '#'을 삭제해 주세요.\n"
            exit 1
          fi

      - name: React 빌드
        run: |
          cat $ENV_FILE_NAME

          printf "Checking .env file existence:\n"
          ls -l .env.development

          printf "ENV_FILE_NAME: $ENV_FILE_NAME\n"


          set -a
          source "$ENV_FILE_NAME"
          # pnpm run $([[ "$DEPLOY_ENV" == "dev" ]] && echo "build" || echo "build-prod"):$SERVICE_NAME
          pnpm run build
