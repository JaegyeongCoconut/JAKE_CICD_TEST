# LINK: 배포 Flow chart 링크 https://boardmix.com/app/editor/yrBD1jJ3wyfQEpDyjjGuqw
# LINK: S3 배포 버킷 링크 https://ap-northeast-2.console.aws.amazon.com/s3/home?region=ap-northeast-2
# LINK: CloudFront 링크 https://us-east-1.console.aws.amazon.com/cloudfront/v4/home?region=ap-southeast-1#/distributions
# LINK: S3 env 버킷 링크 https://ap-northeast-2.console.aws.amazon.com/s3/buckets/coconutsilo-env-dev?region=ap-northeast-2&bucketType=general&tab=objects
# LINK: Notion env 링크 https://www.notion.so/coconutsilo/1f74486ed21f47a3a4f087d0ed94c263?v=aad4eec6ae7c43918581c212864c424d
name: KOKKOK WEB Service Deploy

on:
  workflow_dispatch: # NOTE: 수동 실행 이벤트
    inputs:
      SERVICE_NAME:
        description: "Service name for deployment"
        required: true
      DEPLOY_ENV:
        description: "Deployment environment"
        required: true

jobs:
  run-job:
    runs-on: ubuntu-latest # NOTE: 워크플로를 실행할 환경 설정
    env:
      AUTHORIZED_BRANCHES: "main,develop" # NOTE: 배포 가능한 브랜치 목록. ','로 구분. 띄어쓰기 x
      AUTHORIZED_USERS_IN_PROD: "JaegyeongCoconut,Hyyunjin,CoconutJiyong" # NOTE: main branch 배포 권한이 있는 사용자 목록. ','로 구분. 띄어쓰기 x
      AUTHORIZED_USERS_IN_DEV: "JaegyeongCoconut,Hyyunjin,CoconutJiyong,HojinChoicoco" # NOTE: develop branch 배포 권한이 있는 사용자 목록. ','로 구분. 띄어쓰기 x
      # NOTE: 서비스별 CloudFront ID 목록. JSON 형태로 작성. 띄어쓰기 x
      CLOUD_FRONT_SERVICES: '{
        "eCommerceAdmin-dev": "E2IMC4GOL9IKWA",
        "carAdmin-dev": "EB3W4GTAL529J",
        "carAdmin-prod": "E5QUPE30N5P6M",
        "carInspection-dev": "E3HPI2NX3ZV9J3",
        "carInspection-prod": "E2M7042NEL7TSQ",
        "logisticsAdmin-dev": "E9TQP7SLHLETV",
        "logisticsAdmin-prod": "E21EYEFNY9XHXK"
        }'
      # NOTE: 서비스별 S3 버킷 목록. JSON 형태로 작성
      S3_DEPLOY_SERVICES_BUCKETS: '{
        "carAdmin": "kk-car-admin-web",
        "carInspection": "kk-car-inspection-web",
        "eCommerceAdmin": "kk-ecomm-admin-web",
        "logisticsAdmin": "kk-logi-carriers-web"
        }'
      S3_DEPLOY_BUCKET_REGION: "ap-southeast-1" # NOTE: 배포 S3 버킷이 생성된 리전
      # S3_ENV_BUCKET_NAME: "coconutsilo-env-dev" # NOTE: .env S3 버킷 이름
      # S3_ENV_BUCKET_REGION: "ap-northeast-2" # NOTE: .env S3 버킷 리전
      AWS_ACCESS_KEY_ID: ${{ secrets.COCONUT_AWS_ACCESS_KEY_ID }} # NOTE: IAM Access Key
      AWS_SECRET_ACCESS_KEY: ${{ secrets.COCONUT_AWS_SECRET_ACCESS_KEY }} # NOTE: IAM Secret Access Key

    steps:
      # NOTE: github actions env 설정
      - name: Set github actions env
        run: |
          echo "SERVICE_NAME=${{ github.event.inputs.SERVICE_NAME }}" >> $GITHUB_ENV
          echo "DEPLOY_ENV=${{ github.event.inputs.DEPLOY_ENV }}" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

          printf "✅ Set env in github actions 'SERVICE_NAME' is ${{ github.event.inputs.SERVICE_NAME }}\n"
          printf "✅ Set env in github actions 'DEPLOY_ENV' is ${{ github.event.inputs.DEPLOY_ENV }}\n"
          printf "✅ Set env in github actions 'CURRENT_BRANCH' is ${{ github.ref_name }}\n"

      # NOTE: 배포 실행 브랜치, 유효성 검사
      - name: Validate branch
        run: |
          if [[ ! ",$AUTHORIZED_BRANCHES," =~ ",$CURRENT_BRANCH," ]]; then
            printf "🚨 ::error:: Unsupported branch: $CURRENT_BRANCH\n"
            exit 1
          fi
          printf "✅ Branch '$CURRENT_BRANCH' is valid for deployment.\n"

      # NOTE: 배포 환경 변수 유효성 검사
      - name: Validate deploy environment
        run: |
          if [[ "$DEPLOY_ENV" != "dev" && "$DEPLOY_ENV" != "prod" ]]; then
            printf "🚨 ::error:: Unsupported deploy environment: $DEPLOY_ENV\n"
            exit 1
          fi
          printf "✅ Deployment environment '$DEPLOY_ENV' is valid.\n"

      # NOTE: 배포 실행 계정 권한 검증
      - name: Validate user authorization
        run: |
          AUTHORIZED_USERS=$([[ "$DEPLOY_ENV" == "dev" ]] && echo "$AUTHORIZED_USERS_IN_DEV" || echo "$AUTHORIZED_USERS_IN_PROD")

          if [[ ! ",$AUTHORIZED_USERS," =~ ",${{ github.actor }}," ]]; then
            printf "🚨 ::error:: User '${{ github.actor }}' is not authorized to deploy.\n"
            exit 1
          fi

          printf "✅ User '${{ github.actor }}' is authorized to deploy to the $DEPLOY_ENV environment.\n"

      # NOTE: 접근할 배포 S3 버킷 경로 설정
      - name: Set deployment S3 bucket
        run: |
          S3_DEPLOY_BUCKET_PREFIX=$(echo $S3_DEPLOY_SERVICES_BUCKETS | jq -r --arg SERVICE_NAME "$SERVICE_NAME" '.[$SERVICE_NAME]')
          if [[ -z "$S3_DEPLOY_BUCKET_PREFIX" ]]; then
            printf "🚨 ::error:: Invalid service name: $SERVICE_NAME\n"
            exit 1
          fi

          S3_DEPLOY_BUCKET_SUFFIX=$([[ "$DEPLOY_ENV" == "dev" ]] && echo "dev-s3" || echo "prd-s3")
          echo "S3_DEPLOY_BUCKET_NAME=${S3_DEPLOY_BUCKET_PREFIX}-${S3_DEPLOY_BUCKET_SUFFIX}" >> $GITHUB_ENV
          printf "✅ S3 bucket for service '$SERVICE_NAME' is '$S3_DEPLOY_BUCKET_NAME'\n"

      # NOTE: 접근할 배포 S3 버킷 존재 여부 확인
      - name: Verify S3 bucket existence
        run: |
          aws s3api head-bucket --bucket $S3_DEPLOY_BUCKET_NAME --region $S3_DEPLOY_BUCKET_REGION || {
            printf "🚨 ::error:: S3 bucket '$S3_DEPLOY_BUCKET_NAME' does not exist.\n"
            exit 1
          }
          printf "✅ S3 bucket '$S3_DEPLOY_BUCKET_NAME' is accessible.\n"

      # # NOTE: 접근할 .env S3 버킷 및 파일 경로 설정
      # - name: Set .env S3 bucket & file path
      #   run: |
      #     ENV_FILE_NAME=$([[ "$DEPLOY_ENV" == "dev" ]] && echo ".env.development" || echo ".env.production")
      #     echo "ENV_S3_PATH=web/$SERVICE_NAME/$ENV_FILE_NAME" >> $GITHUB_ENV
      #     printf "✅ .env file path configured: '$ENV_S3_PATH'.\n"

      # # NOTE: 접근할 .env S3 버킷 및 파일 존재 여부 확인
      # - name: Verify .env file existence
      #   run: |
      #     aws s3api head-object --bucket $S3_ENV_BUCKET_NAME --key $ENV_S3_PATH --region $S3_ENV_BUCKET_REGION || {
      #       printf "🚨 ::error:: .env file '$ENV_S3_PATH' does not exist in bucket '$S3_ENV_BUCKET_NAME'.\n"
      #       exit 1
      #     }
      #     printf "✅ .env file '$ENV_S3_PATH' exists.\n"

      # NOTE: 레포지토리 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # # NOTE: S3에서 .env 파일 다운로드
      # - name: Download .env file from S3
      #   run: |
      #     # aws s3 cp s3://$S3_ENV_BUCKET_NAME/$ENV_S3_PATH . --region $S3_ENV_BUCKET_REGION
      #     # printf "✅ $ENV_FILE_NAME file downloaded and saved \n"
      #     aws s3 cp s3://$S3_ENV_BUCKET_NAME/$ENV_S3_PATH .env --region $S3_ENV_BUCKET_REGION
      #     printf "✅ .env file downloaded successfully.\n"

      # NOTE: 의존성 설치
      - name: Install dependencies
        run: npm install

      # NOTE: React 빌드
      - name: Build React application
        run: |
          set -a
          # source $ENV_FILE_NAME
          # npm run $([[ "$DEPLOY_ENV" == "dev" ]] && echo "build" || echo "build-prod")
          source .env
          npm run build
          printf "✅ React application built successfully.\n"

      # NOTE: S3에 파일 배포
      - name: Deploy files to S3
        run: |
          # BUILD_DIR="build-$([[ "$DEPLOY_ENV" == "dev" ]] && echo "dev" || echo "prod")-$SERVICE_NAME"

          BUILD_DIR="dist"

          set -x # 디버깅 모드 활성화
          aws s3 cp --recursive --region $S3_DEPLOY_BUCKET_REGION $BUILD_DIR s3://$S3_DEPLOY_BUCKET_NAME
          printf "✅ Files deployed to S3 bucket '$S3_DEPLOY_BUCKET_NAME'.\n"

      # NOTE: 접근할 CloudFront 설정 + 접근할 CloudFront 객체 존재 여부 확인
      - name: Set CloudFront distribution ID + Check CloudFront object existence
        run: |
          DISTRIBUTION_ID=$(echo $CLOUD_FRONT_SERVICES | jq -r --arg SERVICE_NAME "$SERVICE_NAME" --arg DEPLOY_ENV "$DEPLOY_ENV" '.[$SERVICE_NAME + "-" + $DEPLOY_ENV]')

          if [ -z "$DISTRIBUTION_ID" ]; then
            printf "🚨 ::error:: No CloudFront distribution ID found for service '$SERVICE_NAME' and environment '$DEPLOY_ENV'\n"
            exit 1
          fi

          echo "DISTRIBUTION_ID=${DISTRIBUTION_ID}" >> $GITHUB_ENV
          printf "✅ CloudFront distribution '$DISTRIBUTION_ID' is valid.\n"

      # NOTE: CloudFront 캐시 무효화 실행
      - name: Invalidate CloudFront Cache
        run: |
          printf "🚀 Invalidating cache for CloudFront distribution: $DISTRIBUTION_ID\n"
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

          printf "✅ Cache invalidated for distribution ID: $DISTRIBUTION_ID\n"
