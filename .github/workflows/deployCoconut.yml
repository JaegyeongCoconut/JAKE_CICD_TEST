# LINK: 배포 Flow chart 링크 https://boardmix.com/app/editor/yrBD1jJ3wyfQEpDyjjGuqw
name: KOKKOK WEB Service Deploy

on:
  workflow_dispatch: # NOTE: 수동 실행 이벤트
    inputs:
      SERVICE_NAME:
        description: "Service name for deployment"
        required: true

jobs:
  run-job:
    runs-on: ubuntu-latest # NOTE: 워크플로를 실행할 환경 설정
    env:
      GITHUB_PROD_BRANCH: main # NOTE: 운영 배포 브랜치 이름
      GITHUB_DEV_BRANCH: develop # NOTE: 개발 배포 브랜치 이름
      AUTHORIZED_USERS_IN_PROD: "JaegyeongCoconut, Hyyunjin, CoconutJiyong" # NOTE: main branch 배포 권한이 있는 사용자 목록. ','로 구분
      AUTHORIZED_USERS_IN_DEV: "JaegyeongCoconut, Hyyunjin, CoconutJiyong, HojinChoicoco" # NOTE: develop branch 배포 권한이 있는 사용자 목록. ','로 구분
      S3_DEPLOY_SERVICES_BUCKETS: '{"carAdmin": "kk-car-admin-web", "carInspection": "kk-car-inspection-web", "eCommerceAdmin": "kk-ecomm-admin-web", "logisticsAdmin": "kk-logi-carriers-web"}' # NOTE: 서비스별 S3 버킷 목록. JSON 형태로 작성
      S3_DEPLOY_BUCKET_REGION: "ap-southeast-1" # NOTE: 배포 S3 버킷이 생성된 리전
      S3_ENV_BUCKET_NAME: "coconutsilo-env-dev" # NOTE: .env S3 버킷 이름
      S3_ENV_BUCKET_REGION: "ap-northeast-2" # NOTE: .env S3 버킷 리전
      AWS_ACCESS_KEY_ID: ${{ secrets.COCONUT_AWS_ACCESS_KEY_ID }} # NOTE: IAM Access Key
      AWS_SECRET_ACCESS_KEY: ${{ secrets.COCONUT_AWS_SECRET_ACCESS_KEY }} # NOTE: IAM Secret Access Key

    steps:
      # NOTE: github actions env 설정
      - name: Set github actions env
        run: |
          echo "SERVICE_NAME=${{ github.event.inputs.SERVICE_NAME }}" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

          echo "✅ Set env in github actions 'SERVICE_NAME' is '$SERVICE_NAME'"
          echo "✅ Set env in github actions 'CURRENT_BRANCH' is '$CURRENT_BRANCH'"

      # NOTE: 배포 실행 환경, 유효성 검사. main, develop 브랜치만 배포 가능
      - name: Check branch is valid
        id: validate_branch
        run: |
          if [[ "$CURRENT_BRANCH" != "$GITHUB_DEV_BRANCH" && "$CURRENT_BRANCH" != "$GITHUB_PROD_BRANCH" ]]; then
            echo "🚨 ::error:: Unsupported branch: $CURRENT_BRANCH"
            exit 1
          fi

      # NOTE: 배포 실행 환경에 대한 계정 권한 검증
      - name: Validate branch and authorization
        run: |
          AUTHORIZED_USERS=$([[ "$CURRENT_BRANCH" == "$GITHUB_DEV_BRANCH" ]] && echo "$AUTHORIZED_USERS_IN_DEV" || echo "$AUTHORIZED_USERS_IN_PROD")

          if [[ ! ",$AUTHORIZED_USERS," =~ ",${{ github.actor }}," ]]; then
            echo "🚨 ::error:: User '${{ github.actor }}' is not authorized to deploy."
            exit 1
          fi

          echo "✅ User '$CURRENT_USER' is authorized to deploy to the $CURRENT_BRANCH branch."

      # NOTE: 접근할 배포 S3 버킷 설정
      - name: Set deployment S3 bucket
        id: set_bucket
        run: |
          S3_DEPLOY_BUCKET_PREFIX=$(echo $S3_DEPLOY_SERVICES_BUCKETS | jq -r --arg SERVICE_NAME "$SERVICE_NAME" '.[$SERVICE_NAME]')

          if [[ -z "$S3_DEPLOY_BUCKET_PREFIX" ]]; then
            echo "🚨 ::error:: Invalid service name: $SERVICE_NAME"
            exit 1
          fi

          S3_DEPLOY_BUCKET_SUFFIX=$([[ "$CURRENT_BRANCH" == "$GITHUB_DEV_BRANCH" ]] && echo "dev-s3" || echo "prd-s3")
          echo "S3_DEPLOY_BUCKET_NAME=${S3_DEPLOY_BUCKET_PREFIX}-${S3_DEPLOY_BUCKET_SUFFIX}" >> $GITHUB_ENV
          echo "✅ S3 bucket for service '$SERVICE_NAME' is '$S3_DEPLOY_BUCKET_NAME'"

      # NOTE: 배포 S3 버킷 존재 여부 확인
      - name: Check deployment S3 bucket existence
        run: |
          aws s3api head-bucket --bucket $S3_DEPLOY_BUCKET_NAME --region $S3_DEPLOY_BUCKET_REGION || {
            echo "🚨 ::error:: S3 bucket '$S3_DEPLOY_BUCKET_NAME' does not exist."
            exit 1
          }

      # NOTE: 접근할 .env S3 버킷 및 파일 경로 설정
      - name: Set deployment .env file path
        run: |
          ENV_FILE_NAME=$([[ "$CURRENT_BRANCH" == "$GITHUB_DEV_BRANCH" ]] && echo ".env.development" || echo ".env.production")
          echo "ENV_S3_PATH=web/$SERVICE_NAME/$ENV_FILE_NAME" >> $GITHUB_ENV

      # NOTE: s3 버킷 .env 파일 존재 여부 확인
      - name: Check .env file existence
        run: |
          aws s3api head-object --bucket $S3_ENV_BUCKET_NAME --key $ENV_S3_PATH --region $S3_ENV_BUCKET_REGION || {
            echo "🚨 ::error:: .env file '$ENV_S3_PATH' does not exist in bucket '$S3_ENV_BUCKET_NAME'."
            exit 1
          }
          echo "✅ .env file '$ENV_S3_PATH' exists in the S3 bucket '$S3_ENV_BUCKET_NAME'."

      # NOTE: 레포지토리 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # NOTE: S3에서 환경 변수 파일 다운로드
      - name: Download .env file from S3
        run: |
          # aws s3 cp s3://$S3_ENV_BUCKET_NAME/$ENV_S3_PATH . --region $S3_ENV_BUCKET_REGION
          # echo "✅ $ENV_FILE_NAME file downloaded and saved "
          aws s3 cp s3://$S3_ENV_BUCKET_NAME/$ENV_S3_PATH .env --region $S3_ENV_BUCKET_REGION
          echo "✅ $ENV_FILE_NAME file downloaded and saved as '.env'."

      # 의존 파일 설치
      - name: Install Dependencies
        run: npm install

      # React Build
      - name: Build
        run: |
          set -a
          # source $ENV_FILE_NAME
          # npm run $([[ "$CURRENT_BRANCH" == "$GITHUB_DEV_BRANCH" ]] && echo "build" || echo "build-prod")

          source .env
          npm run build

      # S3에 배포
      - name: Deploy
        run: |
          # BUILD_DIR="build-$([[ "$CURRENT_BRANCH" == "$GITHUB_DEV_BRANCH" ]] && echo "dev" || echo "prod")-$SERVICE_NAME"

          BUILD_DIR="dist"

          set -x # 디버깅 모드 활성화
          aws s3 ls s3://$S3_DEPLOY_BUCKET_NAME --region $S3_DEPLOY_BUCKET_REGION # S3 접근 확인
          aws s3 cp --recursive --region $S3_DEPLOY_BUCKET_REGION $BUILD_DIR s3://$S3_DEPLOY_BUCKET_NAME
