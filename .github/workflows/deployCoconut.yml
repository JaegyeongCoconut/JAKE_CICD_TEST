# LINK: 배포 Flow chart 링크 https://boardmix.com/app/editor/yrBD1jJ3wyfQEpDyjjGuqw
# LINK: S3 링크 https://ap-northeast-2.console.aws.amazon.com/s3/home?region=ap-northeast-2
name: KOKKOK WEB Service Deploy

on:
  workflow_dispatch: # NOTE: 수동 실행 이벤트
    inputs:
      SERVICE_NAME:
        description: "Service name for deployment"
        required: true
      DEPLOY_ENV:
        description: "Deployment environment"
        required: true

jobs:
  run-job:
    runs-on: ubuntu-latest # NOTE: 워크플로를 실행할 환경 설정
    env:
      AUTHORIZED_BRANCHES: "main,develop" # NOTE: 배포 가능한 브랜치 목록. ','로 구분. 띄어쓰기 x
      AUTHORIZED_USERS_IN_PROD: "JaegyeongCoconut,Hyyunjin,CoconutJiyong" # NOTE: main branch 배포 권한이 있는 사용자 목록. ','로 구분. 띄어쓰기 x
      AUTHORIZED_USERS_IN_DEV: "JaegyeongCoconut,Hyyunjin,CoconutJiyong,HojinChoicoco" # NOTE: develop branch 배포 권한이 있는 사용자 목록. ','로 구분. 띄어쓰기 x
      S3_DEPLOY_SERVICES_BUCKETS: '{"carAdmin": "kk-car-admin-web","carInspection": "kk-car-inspection-web","eCommerceAdmin": "kk-ecomm-admin-web","logisticsAdmin": "kk-logi-carriers-web"}' # NOTE: 서비스별 S3 버킷 목록. JSON 형태로 작성
      S3_DEPLOY_BUCKET_REGION: "ap-southeast-1" # NOTE: 배포 S3 버킷이 생성된 리전
      S3_ENV_BUCKET_NAME: "coconutsilo-env-dev" # NOTE: .env S3 버킷 이름
      S3_ENV_BUCKET_REGION: "ap-northeast-2" # NOTE: .env S3 버킷 리전
      AWS_ACCESS_KEY_ID: ${{ secrets.COCONUT_AWS_ACCESS_KEY_ID }} # NOTE: IAM Access Key
      AWS_SECRET_ACCESS_KEY: ${{ secrets.COCONUT_AWS_SECRET_ACCESS_KEY }} # NOTE: IAM Secret Access Key

    steps:
      # NOTE: github actions env 설정
      - name: Set github actions env
        run: |
          echo "SERVICE_NAME=${{ github.event.inputs.SERVICE_NAME }}" >> $GITHUB_ENV
          echo "DEPLOY_ENV=${{ github.event.inputs.DEPLOY_ENV }}" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

          printf "✅ Set env in github actions 'SERVICE_NAME' is '$SERVICE_NAME'\n"
          printf "✅ Set env in github actions 'DEPLOY_ENV' is '$DEPLOY_ENV'\n"
          printf "✅ Set env in github actions 'CURRENT_BRANCH' is '$CURRENT_BRANCH'\n"

      # # NOTE: 배포 실행 브랜치, 유효성 검사. main, develop 브랜치만 배포 가능
      # - name: Check branch is valid
      #   id: validate_branch
      #   run: |
      #     if [[ ! ",$AUTHORIZED_BRANCHES," =~ ",$CURRENT_BRANCH," ]]; then
      #       printf "🚨 ::error:: Unsupported branch: $CURRENT_BRANCH\n"
      #       exit 1
      #     fi

      # # NOTE: 배포 실행 환경 변수 명 검사
      # - name: Check deploy environment is valid
      #   run: |
      #     if [[ "$DEPLOY_ENV" != "dev" && "$DEPLOY_ENV" != "prod" ]]; then
      #       printf "🚨 ::error:: Unsupported deploy environment: $DEPLOY_ENV\n"
      #       exit 1
      #     fi

      # # NOTE: 배포 실행 환경에 대한 계정 권한 검증
      # - name: Validate branch and authorization
      #   run: |
      #     AUTHORIZED_USERS=$([[ "$DEPLOY_ENV" == "dev" ]] && echo "$AUTHORIZED_USERS_IN_DEV" || echo "$AUTHORIZED_USERS_IN_PROD")

      #     if [[ ! ",$AUTHORIZED_USERS," =~ ",${{ github.actor }}," ]]; then
      #       printf "🚨 ::error:: User '${{ github.actor }}' is not authorized to deploy.\n"
      #       exit 1
      #     fi

      #     printf "✅ User '${{ github.actor }}' is authorized to deploy to the $DEPLOY_ENV environment.\n"

      # # NOTE: 접근할 배포 S3 버킷 설정
      # - name: Set deployment S3 bucket
      #   id: set_bucket
      #   run: |
      #     S3_DEPLOY_BUCKET_PREFIX=$(echo $S3_DEPLOY_SERVICES_BUCKETS | jq -r --arg SERVICE_NAME "$SERVICE_NAME" '.[$SERVICE_NAME]')

      #     if [[ -z "$S3_DEPLOY_BUCKET_PREFIX" ]]; then
      #       printf "🚨 ::error:: Invalid service name: $SERVICE_NAME\n"
      #       exit 1
      #     fi

      #     S3_DEPLOY_BUCKET_SUFFIX=$([[ "$DEPLOY_ENV" == "dev" ]] && echo "dev-s3" || echo "prd-s3")
      #     echo "S3_DEPLOY_BUCKET_NAME=${S3_DEPLOY_BUCKET_PREFIX}-${S3_DEPLOY_BUCKET_SUFFIX}" >> $GITHUB_ENV
      #     printf "✅ S3 bucket for service '$SERVICE_NAME' is '$S3_DEPLOY_BUCKET_NAME'\n"

      # # NOTE: 배포 S3 버킷 존재 여부 확인
      # - name: Check deployment S3 bucket existence
      #   run: |
      #     aws s3api head-bucket --bucket $S3_DEPLOY_BUCKET_NAME --region $S3_DEPLOY_BUCKET_REGION || {
      #       printf "🚨 ::error:: S3 bucket '$S3_DEPLOY_BUCKET_NAME' does not exist.\n"
      #       exit 1
      #     }

      # # NOTE: 접근할 .env S3 버킷 및 파일 경로 설정
      # - name: Set deployment .env file path
      #   run: |
      #     ENV_FILE_NAME=$([[ "$DEPLOY_ENV" == "dev" ]] && echo ".env.development" || echo ".env.production")
      #     echo "ENV_S3_PATH=web/$SERVICE_NAME/$ENV_FILE_NAME" >> $GITHUB_ENV

      # # NOTE: s3 버킷 .env 파일 존재 여부 확인
      # - name: Check .env file existence
      #   run: |
      #     aws s3api head-object --bucket $S3_ENV_BUCKET_NAME --key $ENV_S3_PATH --region $S3_ENV_BUCKET_REGION || {
      #       printf "🚨 ::error:: .env file '$ENV_S3_PATH' does not exist in bucket '$S3_ENV_BUCKET_NAME'.\n"
      #       exit 1
      #     }
      #     printf "✅ .env file '$ENV_S3_PATH' exists in the S3 bucket '$S3_ENV_BUCKET_NAME'.\n"

      # # NOTE: 레포지토리 체크아웃
      # - name: Checkout source code
      #   uses: actions/checkout@v3

      # # NOTE: S3에서 환경 변수 파일 다운로드
      # - name: Download .env file from S3
      #   run: |
      #     # aws s3 cp s3://$S3_ENV_BUCKET_NAME/$ENV_S3_PATH . --region $S3_ENV_BUCKET_REGION
      #     # printf "✅ $ENV_FILE_NAME file downloaded and saved \n"
      #     aws s3 cp s3://$S3_ENV_BUCKET_NAME/$ENV_S3_PATH .env --region $S3_ENV_BUCKET_REGION
      #     printf "✅ $ENV_FILE_NAME file downloaded and saved as '.env'.\n"

      # # NOTE: 의존 파일 설치
      # - name: Install Dependencies
      #   run: npm install

      # # NOTE:  React Build
      # - name: Build
      #   run: |
      #     set -a
      #     # source $ENV_FILE_NAME
      #     # npm run $([[ "$DEPLOY_ENV" == "dev" ]] && echo "build" || echo "build-prod")

      #     source .env
      #     npm run build

      # # NOTE:  S3에 배포
      # - name: Deploy
      #   run: |
      #     # BUILD_DIR="build-$([[ "$DEPLOY_ENV" == "dev" ]] && echo "dev" || echo "prod")-$SERVICE_NAME"

      #     BUILD_DIR="dist"

      #     set -x # 디버깅 모드 활성화
      #     aws s3 ls s3://$S3_DEPLOY_BUCKET_NAME --region $S3_DEPLOY_BUCKET_REGION # S3 접근 확인
      #     aws s3 cp --recursive --region $S3_DEPLOY_BUCKET_REGION $BUILD_DIR s3://$S3_DEPLOY_BUCKET_NAME

  trigger-next-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Workflow 2
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/<WORKFLOW_2_FILE_NAME>/dispatches \
            -d '{"ref":"${{ github.ref_name }}","inputs":{"SERVICE_NAME": "${{ github.event.inputs.SERVICE_NAME }}", "DEPLOY_ENV": "${{ github.event.inputs.DEPLOY_ENV }}"}}'
